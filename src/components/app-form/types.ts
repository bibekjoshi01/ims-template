import { SxProps } from '@mui/system';
import { Control, FieldErrors, FieldValues } from 'react-hook-form';

/* ------------------------------------------------------------------
   Types
------------------------------------------------------------------ */
export type InputType = 'text' | 'select' | 'switch' | 'file' | 'image' | 'password' | 'date' | string;

export interface SelectOption {
  label: string;
  value: any;
  src?: string;
  sx?: any;
  groupName?: string;
}

export interface CustomInputProps {
  /** Input type: text, email, number, select, switch, file, image, password, etc. */
  type?: InputType;
  /** Name attribute for the input element */
  name: string;
  /** Label to display above the input */
  label?: string;
  /** Controlled value of the input */
  value: any;
  /** Change handler */
  onChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | any) => void;
  /** Change fullwidth */
  fullwidth?: boolean;
  /** Options for select inputs */
  options?: SelectOption[];
  /** Renders a multiline input if true */
  multiline?: boolean;
  /** Number of rows to display if multiline is true */
  rows?: number;
  /** Whether the input has an error */
  error?: boolean;
  /** Helper text to display error message */
  helperText?: string;
  /** Show password visibility toggle */
  showPassword?: Record<string, boolean>;
  /** Handle password visibility toggle */
  handleToggleVisibility?: (field: keyof CustomInputProps['showPassword']) => void;
  /** Image preview size (for image type) */
  imageSize?: number;
  /** To show '*' for required fields */
  required?: boolean;
  /** Label for true value of checkbox */
  trueLabel?: string;
  /** Label for false value of checkbox */
  falseLabel?: string;
  /** Whether the input allows multiple selections (for select type with chips) */
  multipleChips?: boolean;
  /** Additional elements to render inside the input container */
  children?: React.ReactNode;
  /** Reference to the input element */
  inputRef?: React.Ref<any>;
  placeholder?: string;
  /** Additional props (will be split between container and input) */
  [key: string]: any;
}

// This is a generic type for form field.
// When using this type, we need to provide the type of the formdata generated by using schema.
// i.e T is the type of the formdata.
// The type of the form data is used to infer the type of the field name.
export type FormField<T> = {
  label: string; // Label for the field.
  name: keyof T; // Name of the field.
  type?: string; // Type of the field.
  options?: { value: string | number; label: string; src?: string; sx?: SxProps }[]; // Options for select inputs.
  multiline?: boolean; // Renders a multiline input if true.
  rows?: number; // Number of rows to display if multiline is true.
  xxs?: number; // Grid size for extra extra small screens.
  xs?: number; // Grid size for extra small screens.
  sm?: number; // Grid size for small screens.
  defaultValue?: any; // Default value for the field.
  sx?: any; // Style object for the field.
  imageSize?: number; // Size of the image for image inputs.
  required?: boolean; // Whether the field is required. default is true.
  trueLabel?: string; // Label for the true value of a checkbox.
  multipleChips?: boolean; // Whether the field allows multiple chip selections.
  falseLabel?: string; // Label for the false value of a checkbox.
  disabled?: boolean;
  placeholder?: string;
  autoFocus?: boolean;
};

export interface FormSectionProps<T extends FieldValues> {
  /** fields to be displayed in the form section. */
  fields: FormField<T>[];

  /** Form control object from react-hook-form. */
  control: Control<T>;

  /** Errors object from react-hook-form. */
  errors: FieldErrors<T>;

  /** Additional elements to render inside the form section. */
  children?: React.ReactNode;

  /** Additional elements to render inside the input container. */
  childrenForInput?: { [key in keyof T]?: React.ReactNode };

  /** Show password visibility toggle. */
  showPassword?: Record<string, boolean>;

  /** Handle password visibility toggle. */
  handleToggleVisibility?: (field: keyof FormSectionProps<T>['showPassword']) => void;

  /** Default value for the field. */
  defaultValue?: any;

  /** sx . */
  sx?: any;
}
